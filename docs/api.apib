# Flow

## Flows [/v1/flow]

### Get the current configured flows [GET /v1/flow]
Returns all currently configured flows
+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)
  + Body

            {
              "flows": [
                {
                  "name": "firstflow",
                  "enabled": true,
                  "id": "123456",
                  "flow": [],
                  "created": 1538070858845,
                  "updated": 1538070858845
                }
              ]
            }

+ Response 500 (application/json; charset=utf-8)

        {
          "message": "Failed to list flows"
        }


### Configure a new flow [POST /v1/flow]
Adds a new flow.
+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

  + Body

            {
              "flow": [],
              "enabled": true,
              "name": "secondflow"
            }

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok",
          "flow": {
            "name": "secondflow",
            "enabled": true,
            "id": "123457",
            "flow": [],
            "created": 1538070858845,
            "updated": 1538070858845
          }
        }

+ Response 400 (application/json; charset=utf-8)

        {
          "message" : "Missing mandatory field"
        }

+ Response 500 (application/json; charset=utf-8)

        {
          "message" : "failed to create flow"
        }

### Removes all flows [DELETE /v1/flow]
Removes all flows and their configurations.
+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
          "message" : "All flows removed"
        }

+ Response 500 (application/json; charset=utf-8)

        {
          "message" : "failed to remove flows"
        }



## Specific Flow [/v1/flow/{id}]

### Get the current configured flow [GET /v1/flow/{id}]
Returns the configuration of a particular flow

+ Parameters
  + id: 123456 (required, string) - The identifier associated to the flow

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok",
          "flow": {
            "name": "firstflow",
            "enabled": true,
            "id": "123456",
            "flow": [],
            "created": 1538070858845,
            "updated": 1538070858845
          }
        }

+ Response 500

        {
          "msg" : "failed to retrieve data"
        }

+ Response 404

        {
          "message": "Unknown flow: 777777",
          "flow": "777777"
        }

### Reconfigure a specific flow [PUT /v1/flow/{id}]
Reconfigure a particular flow - the old config will be removed and the new one will be deployed.

+ Parameters
  + id: 123456 (required, string) - The identifier associated to the flow

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

  + Body

                {
                  "name" : "newflowname",
                  "enabled" : true,
                  "flow" : []
                }

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok",
          "flow": {
            "name": "newflowname",
            "enabled": true,
            "id": "123456",
            "flow": [],
            "created": 1538070858845,
            "updated": 1538070858845
          }
        }

+ Response 404

        {
          "message": "Unknown flow: 777777",
          "flow": "777777"
        }
+ Response 500

        {
          "msg" : "failed to remove flow"
        }

### Remove the flow [DELETE /v1/flow/{id}]
Removes the flow and its configuration.

+ Parameters
  + id: 123456 (required, string) - The identifier associated to the flow

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200

        {
          "message": "flow removed",
          "flow": {
            "name": "firstflow",
            "enabled": true,
            "id": "123456",
            "flow": [],
            "created": 1538070858845,
            "updated": 1538070858845
          }
        }

+ Response 500

        {
          "msg" : "failed to remove flow"
        }

+ Response 404

        {
          "message": "Unknown flow: 777777",
          "flow": "777777"
        }

## Nodes [/v1/node]

### Add a remote node [POST /v1/node]
Adds a remote node

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

  + Body

            {
                "image": "raulnegreiros/kelvin:latest",
                "id": "kelvin"
            }

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok"
        }

+ Response 400

        {
          "message" : "Missing mandatory field"
        }

+ Response 500

        {
          "message" : "Failed to add node"
        }

### Retrieve all remote nodes [GET /v1/node]
Retrieve all currently running remote nodes

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

            {
              "nodes": [
                {
                  "id": "kelvin",
                  "image": "raulnegreiros/kelvin:latest"
                }
              ]
            }

+ Response 500 (application/json; charset=utf-8)

        {
          "message": "Failed list nodes",
        }


### Remove a remote node [DELETE /v1/node/{id}]
Removes a remote node

+ Parameters
  + id: kelvin (required, string) - The identifier associated to the node

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok"
        }

+ Response 500

        {
          "message": "Failed to remove node.",
        }

### Remove all remote nodes [DELETE /v1/node]
Removes a remote node

+ Request (application/json; charset=utf-8)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=utf-8)

        {
          "message": "ok"
        }

+ Response 500 (application/json; charset=utf-8)

        {
          "message": "Failed to remove node.",
        }



## NodeRED nodes [/nodes]

### Retrieve all nodes [GET /nodes]


+ Request for node descriptions
  + Headers

            Authorization: Bearer JWT
            Accept: application/json

+ Response 200 (application/json; charset=utf-8)

        [
            {
            "id": "dojot/change",
            "name": "change",
            "module": "dojot",
            "version": "1.0.0",
            "enabled": true,
            "local": true,
            "types": [
                "change"
            ]
            }
        ]

+ Request for node HTML
  + Headers

            Authorization: Bearer JWT
            Accept: text/html

+ Response 200 (text/html; charset=utf-8)

        <html>Node description in HTML</html>

## NodeRED localization strings [/locales]

### Retrieve localization strings for node-red nodes [GET /locales/node-red]

+ Request
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json)

            {
                "common": {
                    "label": {
                    "payload": "Payload",
                    "topic": "Topic",
                    "name": "Name",
                    "username": "Username"
                    }
                }
            }

